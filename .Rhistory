newdata[,85]<- c(2,NA,NA,2)
newdata[,112]<-c(NA,100,100,100)
View(newdata)
predict(modFit,newdata)
modFit<- train(Class ~ ., method="rpart", data = training)
predict(modFit,newdata)
newdata$Case<-as.factor(newdata$Case)
predict(modFit,newdata)
sub_train<-subset(training, select = c(3, 50, 85, 103, 112))
View(sub_train)
sub_new<-subset(newdata,select = c(3, 50, 85, 103, 112))
modfit1<-train(Class ~ ., method="rpart", data = sub_train)
predict(modfit1, newdata = sub_new)
a<-predict(modfit1, newdata = sub_new)
a
sub_new$Class<-as.factor(sub_new$Class)
a<-predict(modfit1, newdata = sub_new)
a
a<-sub_new[1,]
pa<-predict(modfit1,newdata = a)
pa
class(sub_train$Class)
modfit1$finalModel
require(rattle)
install.packages("rattle")
library(rattle)
plot(modfit1$finalModel,uniform = T)
text(modfit1$finalModel, use.n = T, all = T, cex=0.8)
View(a)
a<-sub_new[1,]
b<-sub_new[2,]
View(b)
c<-sub_new[3,]
d<-sub_new[4,]
View(c)
View(d)
plot(modfit1$finalModel,uniform = T)
text(modfit1$finalModel, use.n = T, all = T, cex=0.6)
plot(modfit1$finalModel,uniform = T)
text(modfit1$finalModel, use.n = T, all = T, cex=0.4)
plot(modfit1$finalModel,uniform = T)
text(modfit1$finalModel, use.n = T, all = T, cex=0.6)
predict(modfit1,a)
predict(modfit1,a[,-c("Class")])
predict(modfit1,a[,-1])
predict(modfit1,b)
predict(modfit1,c)
predict(modfit1,d)
View(sub_new)
View(sub_train)
sub_train$Class<-as.character(sub_train$Class)
modfit1<-train(Class ~., method="rpart", data = sub_train)
predict(modfit1,a)
a$Class<-as.character(a$Class)
predict(modfit1,a)
data(olive)
View(olive)
?tree
modfit<-train(Area ~ ., method="rpart", data = olive)
newdata<-as.data.frame(t(colMeans(olive)))
View(newdata)
predict(modfit, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(testSA)
View(trainSA)
set.seed(13234)
modfit<-train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
class(trainSA$chd)
trainSA$chd<-as.factor(trainSA$chd)
modfit<-train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred_train<-predict(modfit,trainSA)
pred_train
val_train<-train$chd
val_train<-trainSA$chd
val_train
missClass(val_train,pred_train)
pred_train<-as.integer(pred_train)
missClass(val_train,pred_train)
pred_train<-predict(modfit,trainSA, type="response")
modfit<-glm(chd ~ age+alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
pred_train<-predict(modfit,trainSA, type="response")
missClass(val_train,pred_train)
val_test<-testSA$chd
pred_test<-predict(modfit, testSA, type="response")
missClass(val_test, pred_test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
head(vowel.train)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
set.seed(33833)
?randomForest
install.packages("randomForest")
?randomForest
randomForest(y ~ ., data=vowel.train)
library(randomForest)
randomForest(y ~ ., data=vowel.train)
modrf<-randomForest(y ~ ., data=vowel.train)
?varImp
varImp(modrf)
order(varImp(modrf))
?to.monthly
library(pgmm)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(rpart)
library(gbm)
install.packages(gbm)
install.packages("gbm")
library(gbm)
library(gbm)
library(lubridate)
require(forecast)
install.packages("forecast")
library(forecast)
library(e1071)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vower.test$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
mod1<-train(y ~. data=vowel.train, method="rf")
mod1<-train(y ~., data=vowel.train, method="rf")
mod1
mod2<-train(y ~ ., data=vowel.train, method="gbm")
mod1
pred1<-predict(mod1, vowel.test)
pred2<-predict(mod2, vowel.test)
?confusionMatrix
table(pred1, vowel.test$y)
confusionMatrix(vowel.test$y, pred1)
confusionMatrix(vowel.test$y, pred2)
confusionMatrix(pred1, pred2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(testing)
mod1<-train(diagnosis ~ ., data = training, method="rf")
mod2<-train(diagnosis ~., data = training, method="gbm")
mod3<-train(diagnosis ~., data = training, method="lda")
pred1<-predict(mod1,testing)
pred2<-predict(mod2,testing)
pred3<-predict(mod3,testing)
predDF<-data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis ~., method="rf", data=predDF)
View(predDF)
combPred<-predict(combModFit, predDF)
confusionMatrix(testing$diagnosis, pred1)
confusionMatrix(testing$diagnosis, pred2)
confusionMatrix(testing$diagnosis, pred3)
confusionMatrix(testing$diagnosis, combPred)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3433)
set.seed(233)
View(training)
?plot.enet
??plot.enet
mod<-train(CompressiveStrength ~ ., method="lasso", data = training)
mod<-train(CompressiveStrength ~ ., method="lasso", data = training)
??plot.enet
plot.enet(mod, xvar = "penalty")
plot(mod, xvar = "penalty")
?enet
obj<-enet(x=subset(training, select = -c(CompressiveStrength)), y=predict(mod,training),lambda = 0)
x<-subset(training, select = -c(CompressiveStrength))
x<-as.matrix(x)
obj<-enet(x=x, y=predict(mod,training),lambda = 0)
plot(obj, xvar = "penalty")
?plot.enet
plot(obj, xvar = "penalty", use.color = T)
legend()
legend(300,390)
legend(300,290, "legend")
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
View(dat)
?bats
View(training)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
View(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
install.packages("xts")
install.packages("xts")
library(xts)
mGoog <- to.monthly(GOOG)
?ts
?to.monthly
class(GOOG)
googOpen<- Op(GOOG)
?Op
View(testing)
?bats
library(forecast)
?bats
library(quantmod)
head(GOOG)
mGoog<-to.monthly(GOOG)
googOpen<-Op(GOOG)
View(googOpen)
ts1<-ts(googOpen,frequency = 12)
head(ts1)
ts1<-ts(training,frequency = 12)
ts1
ts1<-ts(training,frequency = 31)
ts1
mTrain<-to.monthly(training)
Train_2<-subset(training, select=-c(X))
View(Train_2)
mTrain<-to.monthly(Train_2)
class(Train_2$date)
Train_2$date<-as.Date(Train_2$date)
class(Train_2$date)
mTrain<-to.monthly(Train_2)
Train_2$date
Train_2$date<-as.POSIXlt(Train_2$date)
mTrain<-to.monthly(Train_2)
rownames(Train_2)=Train_2[,1]
mTrain<-to.monthly(Train_2)
Train_3<-subset(Train_2,select = -c(date))
View(Train_3)
?ts
ts1<-as.ts(Train_3)
ts1
tail(Train_3)
?bats
mod<-bats(ts1)
?forecast
tstrain
tstest=ts(testing$visitsTumblr)
View(testing)
?bats
fcast<-forecast(mod)
plot(fcast)
?forecast
fcast<-forecast(mod,model=fit)
plot(fcast)
?bats
?forecast
tail(tstest)
tail(testing)
fc<-forecast(mod, h=235, model=fit)
plot(fc)
?forecast
modfit<-bats(tstrain)
fc<-forecast(modfit, h=235, model=fit, level = 95)
plot(fc)
lines(tstest, col="red")
plot(fc)
lines(testing$visitsTumblr,col="red")
plot(fc)
lines(x=testing$X,y=testing$visitsTumblr,col="red")
fc$upper
testing$upper<-fc$upper
testing$lower<-fc$lower
View(testing)
summary(fc$lower)
summary(testing$visitsTumblr)
testing$out<-where(testing$visitsTumblr>testing$upper)
where(testing$visitsTumblr>testing$upper)
?where
which(testing$visitsTumblr>testing$upper)
9/235
1-9/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
set.seed(325)
View(training)
svm.model<-svm(CompressiveStrength ~., data=training)
pred<-predict(svm.model, testing)
confusionMatrix(testing$CompressiveStrength, pred)
error<-testing$CompressiveStrength-pred
sqrt(mean(error^2))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod1<-train(diagnosis ~., method="rf", data = training)
mod2<-train(diagnosis ~., method="gbm", data = training)
mod3<-train(diagnosis ~., method="lda", data = training)
pred1<-predict(mod1, testing)
pred2<-predict(mod2, testing)
pred3<-predict(mod3, testing)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combModFit<-train(diagnosis ~., method="rf", data=predDF)
combPred<-predict(combModFit,predDF)
confusionMatrix(testing$diagnosis,pred1)
confusionMatrix(testing$diagnosis,pred2)
confusionMatrix(testing$diagnosis,pred3)
confusionMatrix(testing$diagnosis,combPred)
install.packages("shiny")
library(shiny)
runApp('datascience/DataProduct/myApp')
runApp('datascience/DataProduct/myApp')
?builder
library(shiny)
runApp('datascience/DataProduct/myApp')
runApp('datascience/DataProduct/myApp')
data("trees")
head(trees)
?brushedPoints
runApp('datascience/DataProduct/myApp')
runApp('datascience/DataProduct/myApp')
runApp('datascience/DataProduct/myApp')
install.packages("miniUI")
library(shiny)
library(miniUI)
myfirstGadget<-function(){
ui<-miniPage(
gadgetTitleBar("my first gadget")
)
server<-function(input, output, session){
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myfirstGadget()
?suppressPackageStartupMessages
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
library(googleVis)
M<-gvisMotionChart(Fruits,"Fruit","Year",options = list(width=600, height=400))
plot(M)
plot(M,chartr)
plot(M,"chart")
plot(M)
Fruits
M<-gvisMotionChart(Fruits,"Fruit","Year")
plot(M)
plot(M)
plot(M)
plot(M)
plot(M)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
line
plot(line)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
plot(Line)
plot(M)
library(googleVis)
M<-gvisMotionChart(Fruits,"Fruit","Year")
plot(M)
Exports
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
GTM
plot(GTM)
Fruits
M<-gvisMotionChart(Fruits,"Fruit","Year")
plot(M)
install.packages("plotly")
library(plotly)
mtcars
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
mtcars$wt
plot_ly(mtcars, x=mtcars$wt, y=mpg, mode="markers")
setwd("~/datascience/DataProduct/myPresentation")
install.packages("leaflet")
library(leaflet)
my_map<-leaflet() %>% addTiles()
my_map
class(my_map)
setwd("~/datascience/DataProduct/week2Proj")
31*215/230
knitr::opts_chunk$set(echo = FALSE)
library(leaflet)
NUSlatLong<-data.frame(
lat=c(1.300415,1.296930,1.292395,1.295054),
lng=c(103.770797,103.773253,103.773971,103.773851))
SchIcon<- makeIcon(
iconUrl = "http://bunatalajial.com/assets/uploads/home/01.png",
iconWidth = 28, iconHeight = 30,
iconAnchorX = 28/2, iconAnchorY=16
)
IibIcon<- makeIcon(
iconUrl = "https://d30y9cdsu7xlg0.cloudfront.net/png/79163-200.png",
iconWidth = 28, iconHeight = 30,
iconAnchorX = 28/2, iconAnchorY=16
)
NUSSites<- c(
"<a href='https://www.eng.nus.edu.sg/'>NUS Engineering</a>",
"<a href='http://libportal.nus.edu.sg/frontend/index'>NUS Central Library</a>",
"<a href='https://bschool.nus.edu.sg/'>NUS Business School</a>",
"<a href='http://www.comp.nus.edu.sg/'>NUS School of Computing</a>"
)
NUSlatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon=c(SchIcon,IibIcon,SchIcon,SchIcon), popup=NUSSites)
addMarkers?
()
?addMarkers
NUSlatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icons=c(SchIcon,IibIcon,SchIcon,SchIcon), popup=NUSSites)
NUSlatLong<-data.frame(
lat=c(1.300415,1.296930,1.292395,1.295054),
lng=c(103.770797,103.773253,103.773971,103.773851))
SchIcon<- makeIcon(
iconUrl = "http://bunatalajial.com/assets/uploads/home/01.png",
iconWidth = 28, iconHeight = 30,
iconAnchorX = 28/2, iconAnchorY=16
)
IibIcon<- makeIcon(
iconUrl = "https://d30y9cdsu7xlg0.cloudfront.net/png/79163-200.png",
iconWidth = 28, iconHeight = 30,
iconAnchorX = 28/2, iconAnchorY=16
)
NUSIcon<-icons(
iconUrl = c("http://bunatalajial.com/assets/uploads/home/01.png",
"https://d30y9cdsu7xlg0.cloudfront.net/png/79163-200.png",
"http://bunatalajial.com/assets/uploads/home/01.png",
"http://bunatalajial.com/assets/uploads/home/01.png"),
iconWidth = 28, iconHeight = 30,
iconAnchorX = 28/2, iconAnchorY=16
)
NUSSites<- c(
"<a href='https://www.eng.nus.edu.sg/'>NUS Engineering</a>",
"<a href='http://libportal.nus.edu.sg/frontend/index'>NUS Central Library</a>",
"<a href='https://bschool.nus.edu.sg/'>NUS Business School</a>",
"<a href='http://www.comp.nus.edu.sg/'>NUS School of Computing</a>"
)
NUSlatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon=NUSIcon, popup=NUSSites)
